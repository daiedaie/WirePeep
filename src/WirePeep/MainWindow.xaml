<m:ExtendedWindow x:Class="WirePeep.MainWindow"
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
		xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:m="http://menees.com/xaml"
		xmlns:local="clr-namespace:WirePeep"
		xmlns:comp="clr-namespace:System.ComponentModel;assembly=WindowsBase"
		mc:Ignorable="d"
		Title="WirePeep - Network Downtime Monitor" Height="450" Width="800"
		FocusManager.FocusedElement="{Binding ElementName=statusGrid}"
				  Loaded="WindowLoaded" Activated="WindowActivated" StateChanged="WindowStateChanged" Closing="WindowClosing" Closed="WindowClosed" ResizeMode="CanResizeWithGrip" >

    <Window.CommandBindings>
        <CommandBinding Command="local:Commands.AddLocation" Executed="AddLocationExecuted" />
		<CommandBinding Command="local:Commands.EditPeerGroups" Executed="EditPeerGroupsExecuted" />
		<CommandBinding Command="local:Commands.Exit" Executed="ExitExecuted" />
        <CommandBinding Command="local:Commands.ExportLog" Executed="ExportLogExecuted" CanExecute="ExportLogCanExecute"/>
        <CommandBinding Command="local:Commands.ViewOptions" Executed="ViewOptionsExecuted" />
        <CommandBinding Command="Help" Executed="HelpExecuted" />
        <CommandBinding Command="local:Commands.About" Executed="AboutExecuted" />
		<CommandBinding Command="local:Commands.SimulateConnection" Executed="SimulateConnectionExecuted" />
		<CommandBinding Command="local:Commands.EditItem" Executed="EditItemExecuted" CanExecute="EditItemCanExecute"/>
        <CommandBinding Command="local:Commands.DeleteItem" Executed="DeleteItemExecuted" CanExecute="DeleteItemCanExecute"/>
        <CommandBinding Command="local:Commands.CopyValue" Executed="CopyValueExecuted" CanExecute="CopyCanExecute"/>
        <CommandBinding Command="local:Commands.CopyRow" Executed="CopyRowExecuted" CanExecute="CopyCanExecute"/>
		<CommandBinding Command="local:Commands.Unselect" Executed="UnselectExecuted" CanExecute="UnselectCanExecute"/>
	</Window.CommandBindings>

    <Window.Resources>
        <local:StatusRowCollection x:Key="StatusRows"/>
        <local:LogRowCollection x:Key="LogRows"/>

		<!-- LiveGrouping is needed to auto-regroup when GroupName changes. https://stackoverflow.com/a/25551181/1882616. -->
		<!-- LiveSorting is needed to auto-resort when GroupName or LocationName changes. -->
		<CollectionViewSource x:Key="StatusRowsView" Source="{StaticResource StatusRows}" IsLiveGroupingRequested="True" IsLiveSortingRequested="True">
            <CollectionViewSource.GroupDescriptions>
                <PropertyGroupDescription PropertyName="GroupName"/>
            </CollectionViewSource.GroupDescriptions>

			<CollectionViewSource.SortDescriptions>
				<comp:SortDescription PropertyName="GroupName"/>
				<comp:SortDescription PropertyName="LocationName"/>
				<comp:SortDescription PropertyName="LocationAddressText"/>
			</CollectionViewSource.SortDescriptions>
        </CollectionViewSource>

        <CollectionViewSource x:Key="LogRowsView" Source="{StaticResource LogRows}"/>

        <Style x:Key="VCenterText" TargetType="TextBlock">
            <Setter Property="VerticalAlignment" Value="Center"/>
        </Style>

        <Style x:Key="ListViewGrid" TargetType="DataGrid">
            <Setter Property="IsReadOnly" Value="True"/>
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
            <Setter Property="CanUserReorderColumns" Value="False"/>
            <Setter Property="CanUserSortColumns" Value="False"/>
            <Setter Property="GridLinesVisibility" Value="None"/>
            <Setter Property="AutoGenerateColumns" Value="False"/>
            <Setter Property="CanUserResizeRows" Value="False"/>
            <Setter Property="HeadersVisibility" Value="Column"/>
            <Setter Property="ClipboardCopyMode" Value="None"/>
			<Setter Property="SelectionMode" Value="Single"/>
		</Style>

        <!-- Note: These geometries assume they're drawn in a 24x24 Canvas. Wrap the Canvas in a ViewBox to scale it up or down. -->
        <!-- https://materialdesignicons.com/icon/check-bold -->
        <Geometry x:Key="ConnectedPathData">
            M9,20.42L2.79,14.21L5.62,11.38L9,14.77L18.88,4.88L21.71,7.71L9,20.42Z
        </Geometry>
        <!-- https://materialdesignicons.com/icon/close-thick -->
        <Geometry x:Key="DisconnectedPathData">
            M20 6.91L17.09 4L12 9.09L6.91 4L4 6.91L9.09 12L4 17.09L6.91 20L12 14.91L17.09 20L20 17.09L14.91 12L20 6.91Z
        </Geometry>
		<!--https://materialdesignicons.com/icon/minus-thick-->
		<Geometry x:Key="UnavailablePathData">
			M20 14H4V10H20V14Z
		</Geometry>

		<BooleanToVisibilityConverter x:Key="BoolVisibility" />

		<Style x:Key="StatusGroupHeaderStyle" TargetType="GroupItem">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="GroupItem">
                        <!-- I originally used an Expander control like this: https://www.c-sharpcorner.com/uploadfile/dpatra/grouping-in-datagrid-in-wpf/
						But it was ugly, not that useful, and would have required persisting the expanded state of each group. -->
                        <StackPanel>
                            <DockPanel>
                                <!-- The DataContext here is a CollectionViewGroup (based on the PropertyGroupDescription.) -->
                                <!-- DataTrigger idea came from https://stackoverflow.com/a/8534694/1882616. -->
                                <DockPanel.Style>
                                    <Style TargetType="DockPanel">
                                        <!-- Default to light green; switch to light red if group isn't connected. -->
                                        <Setter Property="Background" Value="#FFD2FFD2"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Items[0].GroupConnection}" Value="Disconnected">
                                                <Setter Property="Background" Value="#FFFFD2D2"/>
                                            </DataTrigger>
											<DataTrigger Binding="{Binding Items[0].GroupConnection}" Value="Unavailable">
												<Setter Property="Background" Value="#FFEAEAEA"/>
											</DataTrigger>
										</Style.Triggers>
                                    </Style>
                                </DockPanel.Style>
                                <Viewbox Height="22" Margin="1">
                                    <Canvas Width="24" Height="24">
                                        <Path>
                                            <Path.Style>
                                                <Style TargetType="Path">
                                                    <Setter Property="Fill" Value="Green"/>
                                                    <Setter Property="Data" Value="{StaticResource ConnectedPathData}"/>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding Items[0].GroupConnection}" Value="Disconnected">
                                                            <Setter Property="Fill" Value="Red"/>
                                                            <Setter Property="Data" Value="{StaticResource DisconnectedPathData}"/>
                                                        </DataTrigger>
														<DataTrigger Binding="{Binding Items[0].GroupConnection}" Value="Unavailable">
															<Setter Property="Fill" Value="Gray"/>
															<Setter Property="Data" Value="{StaticResource UnavailablePathData}"/>
														</DataTrigger>
													</Style.Triggers>
                                                </Style>
                                            </Path.Style>
                                        </Path>
                                    </Canvas>
                                </Viewbox>
                                <TextBlock Text="{Binding Name}" FontWeight="Bold" Style="{StaticResource VCenterText}"/>
                                <TextBlock Text="  —  Poll every " Style="{StaticResource VCenterText}"/>
                                <TextBlock Text="{Binding Items[0].GroupPollSeconds}" Style="{StaticResource VCenterText}"/>
                                <TextBlock Text="s.  Wait " Style="{StaticResource VCenterText}"/>
                                <TextBlock Text="{Binding Items[0].GroupWaitMilliseconds}" Style="{StaticResource VCenterText}"/>
                                <TextBlock Text="ms.  Fail after " Style="{StaticResource VCenterText}"/>
                                <TextBlock Text="{Binding Items[0].GroupFailSeconds}" Style="{StaticResource VCenterText}"/>
                                <TextBlock Text="s outage." Style="{StaticResource VCenterText}"/>
								<TextBlock Text="  Since last fail: " Style="{StaticResource VCenterText}" Visibility="{Binding Items[0].HasGroupEverFailed, Converter={StaticResource BoolVisibility}}"/>
								<TextBlock Text="{Binding Items[0].TimeSinceLastGroupFail}" Style="{StaticResource VCenterText}" Visibility="{Binding Items[0].HasGroupEverFailed, Converter={StaticResource BoolVisibility}}"/>
							</DockPanel>
                            <ItemsPresenter />
                        </StackPanel>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="TextBlock" x:Key="RightAlignCell">
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="TextAlignment" Value="Right"/>
        </Style>
    </Window.Resources>

    <Grid x:Name="windowLayoutGrid">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="4*" MinHeight="25"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="1*" MinHeight="25"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <Menu Grid.Row="0" Padding="2">
			<MenuItem Header="_View" SubmenuOpened="ViewMenuItem_SubmenuOpened">
				<MenuItem Header="Edit _Peer Groups..." Command="local:Commands.EditPeerGroups"/>
				<MenuItem Header="_Add Location..." Command="local:Commands.AddLocation"/>
				<Separator/>
				<MenuItem Header="_Export Log..." Command="local:Commands.ExportLog"/>
                <MenuItem Header="_Options..." Command="local:Commands.ViewOptions"/>
				<MenuItem x:Name="simulateConnectionMenu" Header="_Simulate Connection..." Command="local:Commands.SimulateConnection"/>
				<Separator/>
                <MenuItem Header="E_xit" Command="local:Commands.Exit"/>
            </MenuItem>
            <MenuItem Header="_Help">
                <MenuItem Header="_WirePeep.com" Command="Help"/>
				<MenuItem Header="_About..." Command="local:Commands.About"/>
			</MenuItem>
        </Menu>

		<DataGrid x:Name="statusGrid" Grid.Row="1" ItemsSource="{Binding Source={StaticResource StatusRowsView}}" Style="{StaticResource ListViewGrid}" GotFocus="StatusGridGotFocus" ContextMenuOpening="StatusGridContextMenuOpening" MouseDoubleClick="StatusGridMouseDoubleClick">
            <DataGrid.GroupStyle>
                <GroupStyle ContainerStyle="{StaticResource StatusGroupHeaderStyle}">
                    <GroupStyle.Panel>
                        <ItemsPanelTemplate>
                            <DataGridRowsPresenter/>
                        </ItemsPanelTemplate>
                    </GroupStyle.Panel>
                </GroupStyle>
            </DataGrid.GroupStyle>

            <DataGrid.Columns>
                <DataGridTemplateColumn Header="Poll">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Viewbox Height="16">
                                <Canvas Width="24" Height="24">
                                    <Path>
                                        <Path.Style>
                                            <Style TargetType="Path">
                                                <Style.Triggers>
													<DataTrigger Binding="{Binding LocationConnection}" Value="Connected">
                                                        <Setter Property="Data" Value="{StaticResource ConnectedPathData}"/>
                                                    </DataTrigger>
													<DataTrigger Binding="{Binding LocationConnection}" Value="Disconnected">
                                                        <Setter Property="Data" Value="{StaticResource DisconnectedPathData}"/>
                                                    </DataTrigger>
													<DataTrigger Binding="{Binding LocationConnection}" Value="Unavailable">
														<Setter Property="Data" Value="{StaticResource UnavailablePathData}"/>
													</DataTrigger>
													<!-- MultiDataTrigger idea came from https://stackoverflow.com/a/42343062/1882616. -->
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
															<Condition Binding="{Binding LocationConnection}" Value="Disconnected" />
                                                            <Condition Binding="{Binding IsLocationUpToDate}" Value="False" />
                                                        </MultiDataTrigger.Conditions>
                                                        <!-- 87% transparent red -->
                                                        <Setter Property="Fill" Value="#20FF0000"/>
                                                    </MultiDataTrigger>
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
															<Condition Binding="{Binding LocationConnection}" Value="Disconnected" />
                                                            <Condition Binding="{Binding IsLocationUpToDate}" Value="True" />
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter Property="Fill" Value="Red"/>
                                                    </MultiDataTrigger>
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
															<Condition Binding="{Binding LocationConnection}" Value="Connected" />
                                                            <Condition Binding="{Binding IsLocationUpToDate}" Value="False" />
                                                        </MultiDataTrigger.Conditions>
                                                        <!-- 87% transparent green -->
                                                        <Setter Property="Fill" Value="#20008000"/>
                                                    </MultiDataTrigger>
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
															<Condition Binding="{Binding LocationConnection}" Value="Connected" />
                                                            <Condition Binding="{Binding IsLocationUpToDate}" Value="True" />
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter Property="Fill" Value="Green"/>
                                                    </MultiDataTrigger>
													<MultiDataTrigger>
														<MultiDataTrigger.Conditions>
															<Condition Binding="{Binding LocationConnection}" Value="Unavailable" />
															<Condition Binding="{Binding IsLocationUpToDate}" Value="False" />
														</MultiDataTrigger.Conditions>
														<!-- 87% transparent gray -->
														<Setter Property="Fill" Value="#20808080"/>
													</MultiDataTrigger>
													<MultiDataTrigger>
														<MultiDataTrigger.Conditions>
															<Condition Binding="{Binding LocationConnection}" Value="Unavailable" />
															<Condition Binding="{Binding IsLocationUpToDate}" Value="True" />
														</MultiDataTrigger.Conditions>
														<Setter Property="Fill" Value="Gray"/>
													</MultiDataTrigger>
												</Style.Triggers>
                                            </Style>
                                        </Path.Style>
                                    </Path>
                                </Canvas>
                            </Viewbox>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTextColumn Header="Name" Binding="{Binding LocationName}"/>
                <DataGridTextColumn Header="IP Address" Binding="{Binding LocationAddress}"/>
                <DataGridTextColumn Header="Response (ms)" Binding="{Binding LocationRoundtripMilliseconds}" ElementStyle="{StaticResource RightAlignCell}"/>
            </DataGrid.Columns>

            <DataGrid.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="_Edit Location..." Command="local:Commands.EditItem"/>
                    <MenuItem Header="_Delete Location..." Command="local:Commands.DeleteItem"/>
                    <Separator/>
                    <MenuItem Header="Copy _Value" Command="local:Commands.CopyValue"/>
                    <MenuItem Header="Copy _Row" Command="local:Commands.CopyRow"/>
					<Separator/>
					<MenuItem Header="_Unselect" Command="local:Commands.Unselect"/>
				</ContextMenu>
            </DataGrid.ContextMenu>

			<DataGrid.InputBindings>
				<!-- DataGrid tries to use Ctrl+C itself (for its ClipboardCopyMode) unless we unbind it. We want it for our CopyValue command. -->
				<KeyBinding Key="C" Modifiers="Ctrl" Command="NotACommand"/>
				<!-- DataGrid tries to use Delete itself unless we unbind it. We want it for our DeleteLocation command. -->
				<KeyBinding Key="Delete" Command="NotACommand"/>
			</DataGrid.InputBindings>
        </DataGrid>

        <GridSplitter x:Name="splitter" Grid.Row="2" HorizontalAlignment="Stretch" VerticalAlignment="Center" ShowsPreview="True" Height="4" />

        <DataGrid x:Name="logGrid" Grid.Row="3" ItemsSource="{Binding Source={StaticResource LogRowsView}}" Style="{StaticResource ListViewGrid}" SelectedCellsChanged="LogGridSelectedCellsChanged" GotFocus="LogGridGotFocus" ContextMenuOpening="LogGridContextMenuOpening" MouseDoubleClick="LogGridMouseDoubleClick">
            <DataGrid.Resources>
                <Style TargetType="TextBlock" x:Key="RedIfActive">
                    <Setter Property="Margin" Value="2,0,2,0"/>
                    <Style.Triggers>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsActive}" Value="True" />
								<!-- I couldn't find a way to bind to DataGridCell.IsSelected, so I had to make my own property. :-( -->
								<Condition Binding="{Binding IsSelected}" Value="False" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Foreground" Value="Red"/>
						</MultiDataTrigger>
                    </Style.Triggers>
                </Style>
                <Style TargetType="TextBlock" x:Key="RedIfActive-RightAlign" BasedOn="{StaticResource RedIfActive}">
                    <Setter Property="HorizontalAlignment" Value="Stretch"/>
                    <Setter Property="TextAlignment" Value="Right"/>
                </Style>
            </DataGrid.Resources>

            <DataGrid.Columns>
                <DataGridTextColumn Header="Peer Group" Binding="{Binding PeerGroupName}" ElementStyle="{StaticResource RedIfActive}"/>
                <DataGridTextColumn Header="Start" Binding="{Binding FailStartedLocal}" ElementStyle="{StaticResource RedIfActive}"/>
                <DataGridTextColumn Header="Length" Binding="{Binding Length}" ElementStyle="{StaticResource RedIfActive-RightAlign}"/>
                <DataGridTextColumn Header="End" Binding="{Binding FailEndedLocal}" ElementStyle="{StaticResource RedIfActive}"/>
                <DataGridTextColumn Header="Since Previous" Binding="{Binding SincePrevious}" ElementStyle="{StaticResource RedIfActive-RightAlign}"/>
                <DataGridTextColumn Header="Comment" Binding="{Binding Comment}" ElementStyle="{StaticResource RedIfActive}"/>
            </DataGrid.Columns>

            <DataGrid.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="Edit _Comment..." Command="local:Commands.EditItem"/>
                    <Separator/>
                    <MenuItem Header="Copy _Value" Command="local:Commands.CopyValue"/>
                    <MenuItem Header="Copy _Row" Command="local:Commands.CopyRow"/>
                    <Separator/>
                    <MenuItem Header="_Export Log..." Command="local:Commands.ExportLog"/>
					<Separator/>
					<MenuItem Header="_Unselect" Command="local:Commands.Unselect"/>
				</ContextMenu>
            </DataGrid.ContextMenu>

			<DataGrid.InputBindings>
				<!-- DataGrid tries to use Ctrl+C itself (for its ClipboardCopyMode) unless we unbind it. We want it for our CopyValue command. -->
				<KeyBinding Key="C" Modifiers="Ctrl" Command="NotACommand"/>
			</DataGrid.InputBindings>
		</DataGrid>

        <StatusBar Grid.Row="4">
            <StatusBarItem>
                <TextBlock>Monitored time:</TextBlock>
            </StatusBarItem>
            <StatusBarItem>
                <TextBlock x:Name="monitoredTime">0:00:00</TextBlock>
            </StatusBarItem>
            <Separator/>
            <StatusBarItem>
                <TextBlock>Failure count:</TextBlock>
            </StatusBarItem>
            <StatusBarItem>
                <TextBlock Text="{Binding Source={StaticResource LogRows}, Path=Count}"/>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</m:ExtendedWindow>
